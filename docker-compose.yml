version: '3'

services:
  openapi:
    build: ./docker/openapi
    container_name: ${OPENAPI_GENERATER_CONTAINER_NAME}
    volumes:
      - ${DIR}/generated:/app/generated
      - ${DIR}/src:/app/src
      - ${DIR}/docker/openapi/package.json:/app/package.json
    tty: true

  prism:
    build: ./docker/prism
    container_name: ${PRISM_CONTAINER_NAME}
    command: 'mock -h 0.0.0.0 -d /app/openapi.json'
    volumes:
      - ${DIR}/generated/openapi/openapi.json:/app/openapi.json
    ports:
      - '${PRISM_CLIENT_PORT}:4010'

  swagger-ui:
    build: ./docker/react
    container_name: ${SWAGGER_UI_CONTAINER_NAME}
    environment:
      - CHOKIDAR_USEPOLLING=true
      - PORT=${SWAGGER_UI_CLIENT_PORT}
    volumes:
      - ${DIR}/docker/react/public:/app/html/public
      - ${DIR}/docker/react/src:/app/html/src
      - ${DIR}/generated/openapi/openapi.json:/app/html/public/openapi.json
    command: sh -c "cd html && yarn start"
    ports:
      - "${SWAGGER_UI_CLIENT_PORT}:${SWAGGER_UI_CLIENT_PORT}"
  schemaspy:
    image: schemaspy/schemaspy
    volumes:
      - ${DIR}/schemaspy/output:/output
      - ${DIR}/Docker/schemaspy/drivers:${DB_DRIVERS_DIR}
    command: >
      java -jar schemaspy.jar
      -t ${DB_TYPE}
      -dp ${DB_DRIVERS_DIR}
      -host ${DB_HOST}
      -port ${DB_INTERNAL_PORT}
      -db ${DB_DATABASE}
      -u ${DB_USER}
      -p ${DB_PASSWORD}
      -s ${DB_SCHEMA}
      -connprops allowPublicKeyRetrieval\\=false useSSL\\=false

  nginx:
    image: nginx:1.13.9-alpine
    container_name: schemaspy_nginx
    volumes:
      - ${DIR}/schemaspy/output:/var/www/html:ro
      - ${DIR}/Docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8081:80"
    environment:
      - LANG=ja_JP.UTF-8
      - TZ=Asia/Tokyo
    command: "nginx -g 'daemon off;'"

  phpmig:
    build: ./Docker/phpmig
    volumes:
      - ${DIR}//Docker/phpmig/src/:/app/src
      - ${DIR}/Docker/phpmig/php.ini:/usr/local/etc/php/php.ini
      - ${DIR}/Docker/phpmig/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ${DIR}/migration:/migration
    environment:
      MYSQL_HOST: ${DB_HOST}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_INTERNAL_PORT: ${DB_INTERNAL_PORT}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_KEY: ${XDEBUG_KEY}
    tty: true

  mysql:
    image: mysql:5.7
    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7
    user: "1000:50"
    volumes:
      - ${DIR}/Docker/mysql/my.cnf:/etc/my.cnf
      - ${DIR}/Docker/mysql/data:/var/lib/mysql
      - ${DIR}/Docker/mysql/backup:/tmp/mysql
      - ${DIR}/Docker/mysql/init:/docker-entrypoint-initdb.d
      - ${DIR}/Docker/mysql/logs:/var/log/mysql
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - ${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb_use_native_aio=0

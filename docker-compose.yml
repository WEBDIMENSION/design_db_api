version: '3'

services:
  openapi:
    build: ./docker/openapi
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_openapi
    volumes:
      - ${DIR}/generated/openapi/openapi.json:/app/generated/openapi/openapi.json
      - ${DIR}/openapi:/app/src
      - ${DIR}/docker/openapi/package.json:/app/package.json
    tty: true

  prism:
    build: ./docker/prism
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_prism
    depends_on:
      - openapi
    command: 'mock -h 0.0.0.0 -d /app/openapi.json'
    volumes:
      - ${DIR}/generated/openapi/openapi.json:/app/openapi.json
    ports:
      - '${PRISM_CLIENT_PORT}:4010'

  swagger-ui:
    build: ./docker/swagger_ui_react
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_swagger-ui
    environment:
      - CHOKIDAR_USEPOLLING=true
      - PORT=${SWAGGER_UI_CLIENT_PORT}
    volumes:
      - ${DIR}/docker/swagger_ui_react/public:/app/html/public
      - ${DIR}/docker/swagger_ui_react/src:/app/html/src
      - ${DIR}/generated/openapi/openapi.json:/app/html/public/openapi.json
    command: sh -c "yarn start"
    ports:
      - "${SWAGGER_UI_CLIENT_PORT}:${SWAGGER_UI_CLIENT_PORT}"
    working_dir: /app/html
    tty: true

  schemaspy_mysql:
    image: schemaspy/schemaspy
    profiles:
      - debug
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_schemaspy_mysql
    volumes:
      - ${DIR}/schemaspy/mysql/output:/output
      - ${DIR}/docker/schemaspy/drivers/mysql:${MYSQL_DRIVERS_DIR}
    depends_on:
      - mysql
    command: >
      java -jar schemaspy.jar
      -t ${DB_TYPE_MYSQL}
      -dp ${MYSQL_DRIVERS_DIR}
      -host ${MYSQL_HOST}
      -port ${MYSQL_INTERNAL_PORT}
      -db ${MYSQL_DATABASE}
      -u ${MYSQL_USER}
      -p ${MYSQL_PASSWORD}
      -s ${MYSQL_SCHEMA}
      -connprops allowPublicKeyRetrieval\\=false useSSL\\=false

  schemaspy_postgres:
    image: schemaspy/schemaspy
    profiles:
      - debug
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_schemaspy_postgres
    volumes:
      - ${DIR}/schemaspy/postgres/output:/output
      - ${DIR}/docker/schemaspy/drivers:${POSTGRES_DRIVERS_DIR}
    depends_on:
      - postgres

    command: >
      java -jar schemaspy.jar
      -t ${DB_TYPE_POSTGRES}
      -dp ${POSTGRES_DRIVERS_DIR}
      -host ${POSTGRES_HOST}
      -port ${POSTGRES_INTERNAL_PORT}
      -db ${POSTGRES_DB}
      -u ${POSTGRES_USER}
      -p ${POSTGRES_PASSWORD}
      -connprops useSSL\\\\=false -all

  nginx:
    image: nginx:1.13.9-alpine
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_nginx
    volumes:
      - ${DIR}/schemaspy/mysql/output:/var/www/html/schemaspy/mysql:ro
      - ${DIR}/schemaspy/postgres/output:/var/www/html/schemaspy/postgres:ro
      - ${DIR}/docker/nginx/schemaspy_mysql.conf:/etc/nginx/conf.d/schemaspy_mysql.conf:ro
      - ${DIR}/docker/nginx/schemaspy_postgres.conf:/etc/nginx/conf.d/schemaspy_postgres.conf:ro
    ports:
      - ${NGINX_SCHEMASPY_MYSQL_EXTERNAL_PORT}:${NGINX_SCHEMASPY_MYSQL_INTERNAL_PORT}
      - ${NGINX_SCHEMASPY_POSTGRES_EXTERNAL_PORT}:${NGINX_SCHEMASPY_POSTGRES_INTERNAL_PORT}
    environment:
      - LANG=ja_JP.UTF-8
      - TZ=Asia/Tokyo
    command: "nginx -g 'daemon off;'"

  phpmig_mysql:
    build: ./docker/phpmig
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_phpmig_mysql
    volumes:
      - ${DIR}//Docker/phpmig/src/:/app/src
      - ${DIR}/docker/phpmig/php.ini:/usr/local/etc/php/php.ini
      - ${DIR}/docker/phpmig/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ${DIR}/phpmig:/phpmig
    environment:
      TARGET_DB: ${TARGET_DB_MYSQL}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_INTERNAL_PORT: ${MYSQL_INTERNAL_PORT}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_KEY: ${XDEBUG_KEY}

  phpmig_postgres:
    build: ./docker/phpmig
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_phpmig_postgres
    volumes:
      - ${DIR}//Docker/phpmig/src/:/app/src
      - ${DIR}/docker/phpmig/php.ini:/usr/local/etc/php/php.ini
      - ${DIR}/docker/phpmig/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ${DIR}/phpmig:/phpmig
    environment:
      TARGET_DB: ${TARGET_DB_POSTGRES}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_KEY: ${XDEBUG_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_INTERNAL_PORT: ${POSTGRES_INTERNAL_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  mysql:
#    image: mysql:8.0
    build: ./docker/mysql
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_mysql
    user: "999:999"
    volumes:
      - ${DIR}/docker/mysql/my.cnf:/etc/my.cnf
      #- ${DIR}/docker/mysql/data:/var/lib/mysql
#      - ${DIR}/docker/mysql/data_multipass:/var/lib/mysql
      - volume-mysql:/var/lib/mysql
      - ${DIR}/docker/mysql/backup:/tmp/mysql
      - ${DIR}/docker/mysql/init:/docker-entrypoint-initdb.d
#      - ${DIR}/docker/mysql/logs:/var/log/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: ${TZ}
    ports:
      - ${MYSQL_EXTERNAL_PORT}:${MYSQL_INTERNAL_PORT}
    command: --default-authentication-plugin=mysql_native_password
    #command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb_use_native_aio=0

  postgres:
    image: postgres:14
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_postgres
    user: "999:999"
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:${POSTGRES_INTERNAL_PORT}
    volumes:
#      - ${DIR}/docker/postgres/data_multipass:/var/lib/postgresqldata
      - volume-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: ${TZ}

  elasticsearch:
    build: ./docker/elasticsearch
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.monitoring.collection.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512M -Xmx512M"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - ${ELASTICSEARCH_EXTERNAL_PORT1}:${ELASTICSEARCH_INTERNAL_PORT1}
      - ${ELASTICSEARCH_EXTERNAL_PORT2}:${ELASTICSEARCH_INTERNAL_PORT2}
    tty: true

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.2
    container_name: ${PRISM_CONTAINER_NAME_PREFIX}_kibana
    ports:
      - ${KIBANA_EXTERNAL_PORT}:${KIBANA_INTERNAL_PORT}
    mem_limit: 1g
    memswap_limit: 1g
    environment:
      #- ELASTICSEARCH_HOSTS = http://elasticsearch:${ELASTICSEARCH_INTERNAL_PORT1}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      #- ELASTICSEARCH_HOSTS='["http://elasticsearch:9200"]'
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_PUBLICBASEURL=http://host.docker.internal:${KIBANA_EXTERNAL_PORT}
      #- XPACK_SECURITY_ENABLED=false
    depends_on:
      - elasticsearch

networks:
  default:
    external: false
volumes:
  volume-mysql:
    name: design-db-api-mysql
  volume-postgres:
    name: design-db-api-postgres
